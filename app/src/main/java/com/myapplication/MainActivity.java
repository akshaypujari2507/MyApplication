package com.myapplication;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.net.Uri;import android.os.Environment;import android.os.StrictMode;import android.provider.MediaStore;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.text.InputFilter;import android.text.TextUtils;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.Toast;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStream;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Locale;public class MainActivity extends AppCompatActivity {    private Button btnImage;    private ImageButton btnSubmit,btnRetake;    private LinearLayout linearLayout;    private EditText editText;    private File mediaFile;    private RelativeLayout relativeLayout;    private File sdDir = Environment.getExternalStorageDirectory();    public String picpath = sdDir.getAbsolutePath() + "/VENKAT/pix/";    private Uri fileUri;    private ImageView imageView;    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        if (requestCode == 1) {            if (resultCode == RESULT_OK) {                mediaFile = new File(picpath + "Photo_1.jpg");                if (mediaFile.exists()) {                    btnImage.setVisibility(View.GONE);                    relativeLayout.setVisibility(View.VISIBLE);                    setImage(mediaFile);                } else {                    btnImage.setVisibility(View.VISIBLE);                    Toast.makeText(this, "PHOTO NOT SAVED..PLEASE REDUCE CAMERA MEGAPIXELS/PICTURE SIZE UPTO 3 MP", Toast.LENGTH_LONG).show();                }            } else if (resultCode == RESULT_CANCELED) {                btnImage.setVisibility(View.VISIBLE);            } else {                btnImage.setVisibility(View.VISIBLE);            }        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();        StrictMode.setVmPolicy(builder.build());        btnImage = findViewById(R.id.btnImage);        btnSubmit = findViewById(R.id.btnSubmit);        btnRetake = findViewById(R.id.btnRetake);        relativeLayout = findViewById(R.id.relative);        linearLayout = findViewById(R.id.linear);        editText = findViewById(R.id.editText);        imageView = findViewById(R.id.imgHolder);        InputFilter[] editFilters = editText.getFilters();        InputFilter[] newFilters = new InputFilter[editFilters.length + 1];        System.arraycopy(editFilters, 0, newFilters, 0, editFilters.length);        newFilters[editFilters.length] = new InputFilter.LengthFilter(35); //the desired length        editText.setFilters(newFilters);    }    public void onClick(View view){        switch (view.getId()){            case R.id.btnImage:                photoMethod();                break;            case R.id.btnSubmit:                String strEditText = editText.getText().toString();                if (!TextUtils.isEmpty(strEditText)) {                    Demo("Photo_1.jpg", strEditText);                }else{                    toast("Please Enter Caption!");                }                break;            case R.id.btnRetake:                photoMethod();                break;        }    }    public void photoMethod() {        mediaFile = new File(picpath + "Photo_1.jpg");        fileUri = Uri.fromFile(mediaFile);        Intent intent1 = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);        intent1.putExtra(MediaStore.EXTRA_OUTPUT, fileUri); // set the        startActivityForResult(intent1, 1);    }    public void Demo(String filename, String caption) {        Bitmap bmp = null, dest = null;        try {            /* Working code with timeprint */            String fnm = picpath + filename;            bmp = getBitmap(fnm);            dest = bmp.copy(Bitmap.Config.ARGB_8888, true);            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss dd-MM-yyyy", Locale.ENGLISH);            String dateTime = "Date/Time: " + sdf.format(Calendar.getInstance().getTime()); // reading            Canvas cv = new Canvas(dest);            Paint tPaint = new Paint();            tPaint.setTextSize(25);            tPaint.setColor(Color.YELLOW);            tPaint.setStyle(Paint.Style.FILL);            float height = tPaint.measureText("yY");            cv.drawText(caption, 20f, height + dest.getHeight() - 45f, tPaint);            FileOutputStream out = new FileOutputStream(fnm);            dest.compress(Bitmap.CompressFormat.PNG, 100, out);            out.close();            InputStream is = new FileInputStream(fnm);            Bitmap check = BitmapFactory.decodeStream(is, null, null);            is.close();            bmp.recycle();            dest.recycle();            ByteArrayOutputStream bos = new ByteArrayOutputStream();            check.compress(Bitmap.CompressFormat.JPEG, 100, bos);            bos.close();            check.recycle();            mediaFile = new File(picpath + "Photo_1.jpg");            linearLayout.setVisibility(View.GONE);            setImage(mediaFile);        } catch (Exception e) {            e.printStackTrace();        }        System.gc();    }    Bitmap getBitmap(String path) {        final int IMAGE_MAX_SIZE = 500000;        BitmapFactory.Options bitopt = new BitmapFactory.Options();        bitopt.inJustDecodeBounds = true;        Bitmap bit = BitmapFactory.decodeFile(path, bitopt);        int scale = 1;        while ((bitopt.outWidth * bitopt.outHeight) * (1 / Math.pow(scale, 2)) > IMAGE_MAX_SIZE) {            scale++;        }        Bitmap bat = null;        if (scale > 1) {            scale--;            // scale to max possible inSampleSize that still yields an image            // larger than target            bitopt = new BitmapFactory.Options();            bitopt.inSampleSize = scale;            bat = BitmapFactory.decodeFile(path, bitopt);            // resize to desired dimensions            int height = bat.getHeight();            int width = bat.getWidth();            double y = Math.sqrt(IMAGE_MAX_SIZE / (((double) width) / height));            double x = (y / height) * width;            Bitmap scaledBitmap = Bitmap.createScaledBitmap(bat, (int) x, (int) y, true);            bat = scaledBitmap;            /*             * if (bat.getWidth() > bat.getHeight()) {             * System.out.println("Chomu Russel"); Matrix matrix = new Matrix();             * matrix.postRotate(0); bat = Bitmap.createBitmap(bat, 0, 0,             * bat.getWidth(), bat.getHeight(), matrix, true); }             */            System.gc();        } else {            bat = BitmapFactory.decodeFile(path, bitopt);        }        return bat;    }    public void setImage(File mediaFile){        Bitmap myBitmap = BitmapFactory.decodeFile(mediaFile.getAbsolutePath());        imageView.setImageBitmap(myBitmap);    }    public void toast(String msg){        Toast.makeText(this, ""+msg, Toast.LENGTH_SHORT).show();    }}